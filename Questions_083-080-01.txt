package jiedui;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

public class shezhe {
	private static int NUMS = 20; // 表达式个数的默认值
    private static int MAX_VALUE = 1000; // 表达式的数值范围的默认值 代表 100 以内
    private static List<Rational> listArr = new ArrayList<Rational>();
    private static final String[] OPREATORS = { "+", "-", "*", "/" };
    private static Scanner scanner = new Scanner(System.in);
    public static void main(String[] args) {
    getInitMaxValueAndExpNum(); // 用户输入以确定生成几以内的表达式，以及表达式的个数
    int i = NUMS;
    listArr.clear();
    Random random = new Random(System.currentTimeMillis());
        while ((--i) >= 0) {
            int opA = random.nextInt(MAX_VALUE + 1);
            int opB = random.nextInt(MAX_VALUE + 1);
            String com = OPREATORS[random.nextInt(4)];
            boolean isWrong = true;
            // 判断是否减法有负数值存在 存在则必须重新生成
            while (isWrong) {
                if (com == "/" && (opB == 0 || (opA % opB) != 0)) { // 除数不能为0
                                                                    // 或者能被整出
                    opB = random.nextInt(MAX_VALUE + 1);
                } else if (com == "-" && opA < opB) { // 减法不能有负数
                    opA = random.nextInt(MAX_VALUE + 1);
                    opB = random.nextInt(MAX_VALUE + 1);
                } else if (com == "+" && (opA + opB) > MAX_VALUE) { // 运算的值不能大于MAX_VALUE
                    opA = random.nextInt(MAX_VALUE + 1);
                    opB = random.nextInt(MAX_VALUE + 1);
                } else if (com == "*" && (opA * opB) > MAX_VALUE) { // 运算的值不能大于
                                                                    // MAX_VALUE
                    opA = random.nextInt(MAX_VALUE + 1);
                    opB = random.nextInt(MAX_VALUE + 1);
                } else {
                    break;
                }
            }
            Rational tempRa = new Rational(opA, opB, com);
            listArr.add(tempRa);
        }
        //
        ouput(); // 输出
        input(); // 用户输入结果
        outputResult();// 输出用户是否输入正确
    }

  
    public static void getInitMaxValueAndExpNum() {

        // 输入表达式计算的数值范围
        while (true) {
            System.out.println("请输入一个大于0 小于等于10000的整数，以确定表达式的数值范围:");
            if (scanner.hasNextInt()) {
                MAX_VALUE = scanner.nextInt();
                if (MAX_VALUE > 0 && MAX_VALUE <= 10000) {
                    break;
                } else {
                    System.out.println("请输入正确的范围!");
                }
            } else {
                System.out.println("请正确输入整数值!");
            }
        }

        // 输入要生成的表达式的个数
        while (true) {
            System.out.println("请输入一个大于0 小于等于100整数，代表自动生成多少个表达式:");
            if (scanner.hasNextInt()) {
                NUMS = scanner.nextInt();
                if (NUMS > 0 && NUMS <= 100) {
                    break;
                } else {
                    System.out.println("请输入正确的范围!");
                }
            } else {
                System.out.println("请正确输入整数值!");
            }
        }

    }

    public static void outputResult() {
        int i = 1;
        for (Rational re : listArr) {
            if (re.isRight()) {
                System.out.println("第 " + i + "题结果是: 正确的!" + re.getOpA()
                        + re.getCom() + re.getOpB() + " = " + re.getValue());
            } else {
                System.out.println("第 " + i + "题结果是: 错误的!" + re.getOpA()
                        + re.getCom() + re.getOpB() + " = " + re.getValue());
            }

            i++;
        }
    }

    
    public static void input() {
        int i = 0;
        System.out.println("请依次输入结果");
        for (i = 0; i < listArr.size(); i++) {
            System.out.println("还剩下" + (listArr.size() - i) + "道题");
            int result = 0;
            while (true) {
                if (scanner.hasNextInt()) {
                    result = scanner.nextInt();
                    break;
                } else {
                    scanner.next();
                    System.out.println("请输入有效的值");
                }
            }

            listArr.get(i).computing(result); // 计算本身的结果
        }
    }

  
    public static void ouput() {
        for (Rational ra : listArr) {
            System.out.println(ra.getOpA() + ra.getCom() + ra.getOpB());
        }

    }

}


class Rational {

    private int opA;
  
    private int opB;

    private String com;
    
    private int value;
    
    private boolean isRight = false;
    
    private int userValue;

   
    public Rational(int opA, int opB, String com) {

        this.opA = opA;
        this.opB = opB;
        this.com = com;
        computeValue();
    }

    public boolean isRight() {
        return isRight;
    }

    public int getUserValue() {
        return userValue;
    }

    public int getOpA() {
        return opA;
    }

    public int getOpB() {
        return opB;
    }

    public String getCom() {
        return com;
    }

    public int getValue() {
        return value;
    }

   
    public void computeValue() {
        switch (com) {
        case "+":
            value = opA + opB;
            break;
        case "-":
            value = opA - opB;
            break;
        case "*":
            value = opA * opB;
            break;
        case "/":
            value = opA / opB;
            break;

        }
    }

   
    public void computing(int value) {
        this.userValue = value;
        if (userValue == this.value) {
            this.isRight = true;
        }
    }
}
 



